///////////////////////////////////////////////////////////////////////////////
// AMCONTROL.h
#pragma once

#include "AMCONTROLInterfaces.h"

#include "JRS/JointControl/JRL_PID.h"

class CAMCONTROL 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_AMCONTROLCAMCONTROL)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CAMCONTROL();
	virtual	~CAMCONTROL();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	AMCONTROLParameter m_Parameter;
	AMCONTROLInputs m_Inputs;
	AMCONTROLOutputs m_Outputs;
	AMCONTROLControl m_Control;
	AMCONTROLAdsCmd m_AdsCmd;
	AMCONTROLSetupInfo m_SetupInfo;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	UINT m_counter;

	void SetupSystem(void);
	void CycleAMControl(void);
	void ReadData(void);
	void WriteData(void);
	void ResetEnc(void);

	JRL_PID m_cPID[14];

};
