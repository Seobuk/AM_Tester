///////////////////////////////////////////////////////////////////////////////
// AMCONTROL.cpp
#include "TcPch.h"
#pragma hdrstop

#include "AMCONTROL.h"

#ifndef _PI	
#define _PI	3.141592653589793238462643383279502884197169399375105f
#endif

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CAMCONTROL
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CAMCONTROL
BEGIN_INTERFACE_MAP(CAMCONTROL)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CAMCONTROL)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CAMCONTROL)
IMPLEMENT_ITCADI(CAMCONTROL)
IMPLEMENT_ITCWATCHSOURCE(CAMCONTROL)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CAMCONTROL 
BEGIN_SETOBJPARA_MAP(CAMCONTROL)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_AMCONTROLParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CAMCONTROL 
BEGIN_GETOBJPARA_MAP(CAMCONTROL)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_AMCONTROLParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CAMCONTROL
BEGIN_OBJPARAWATCH_MAP(CAMCONTROL)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CAMCONTROL
BEGIN_OBJDATAAREA_MAP(CAMCONTROL)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_AMCONTROLInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_AMCONTROLOutputs, m_Outputs)
	OBJDATAAREA_VALUE(ADI_AMCONTROLControl, m_Control)
	OBJDATAAREA_VALUE(ADI_AMCONTROLAdsCmd, m_AdsCmd)
	OBJDATAAREA_VALUE(ADI_AMCONTROLSetupInfo, m_SetupInfo)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CAMCONTROL::CAMCONTROL()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(&m_Control, 0, sizeof(m_Control));
	memset(&m_AdsCmd, 0, sizeof(m_AdsCmd));
	memset(&m_SetupInfo, 0, sizeof(m_SetupInfo));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CAMCONTROL::~CAMCONTROL() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CAMCONTROL)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CAMCONTROL::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CAMCONTROL::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CAMCONTROL::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CAMCONTROL::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CAMCONTROL::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code

	static bool bInit = false;
	static int nInitCut = 0;
	static int nTempCut = 0;
	static bool bTest = false;
	char cStep = 0;

	// nInitCut가 5000이 되면 SetupSystem()가 한번 호출되고
	// 그 후에는 CycleAMControl()가 호출됨

	//if (bInit == false && nInitCut > 5000) {
	//	SetupSystem();
	//	bInit = true;
	//}
	//else if (bInit == true) {

	ReadData();


	if (m_AdsCmd.nEncReset == 1) {
		m_AdsCmd.nEncReset = 0;
		ResetEnc();
	}

	if (bInit == false && nInitCut > 5000) {
		m_AdsCmd.nEncReset = 1;
		//	SetupSystem();
		bInit = true;
	}
	else if( bInit == true ) {
		m_AdsCmd.fControlTime += 0.001;
		CycleAMControl();
	}
	else {
		nInitCut++;
	}

	WriteData();


	return hr;
}
///</AutoGeneratedContent>

void CAMCONTROL::ResetEnc(void) {

	for (int i = 0; i < 7; i++) {
		m_SetupInfo.pEncHome[i] = m_Inputs.pEncRaw[i];
	}
}

void CAMCONTROL::SetupSystem(void)
{


}

/////////////////////////////////////////////////////yh
#define pi 3.1415926535
#define L1 0.2;
#define L2 0.2;
#define L3 0.2;

double t = 0;
double traj = 0;

//muscle
double cmd[14];
double force[14];
double temp[14];
JRL_JointState sState[14];

//joint
double apos[7];
int qDirect[7];

void CAMCONTROL::CycleAMControl(void)
{


	for (int i = 0; i < 7; i++) {
		int F = 2 * i;
		int R = (2 * i) + 1;
		m_cPID[F].SetGain(150.0, 0.0, 0.0);
		m_cPID[R].SetGain(150.0, 0.0, 0.0);
	}

	for (int i = 0; i < 7; i++) {
		int F = 2 * i;
		int R = (2 * i) + 1;
		
		sState[F].REF().POS() = m_Control.sRef[i].sMuscleF.fTemperature;
		sState[R].REF().POS() = m_Control.sRef[i].sMuscleR.fTemperature;

		sState[F].ACT().POS() = m_Control.sAct[i].sMuscleF.fTemperature;
		sState[R].ACT().POS() = m_Control.sAct[i].sMuscleR.fTemperature;
	}

	for (int i = 0; i < 7; i++) {
		int F = 2 * i;
		int R = (2 * i) + 1; 

		m_cPID[F].PI(sState[F]);
		m_cPID[R].PI(sState[R]);

		cmd[F] = sState[F].REF().TORQ();
		cmd[R] = sState[R].REF().TORQ();

		if (sState[F].ACT().POS() > sState[F].REF().POS()) {
			m_Control.sRef[i].sMuscleF.nFan = 1;}
		else {
			m_Control.sRef[i].sMuscleF.nFan = 0;}

		if (sState[R].ACT().POS() > sState[R].REF().POS()) {
			m_Control.sRef[i].sMuscleR.nFan = 1;}
		else {
			m_Control.sRef[i].sMuscleR.nFan = 0;}
	}

	// Joint Control
	m_Control.sRef[1].fPos = traj;

	////state 
	//Right leg pos
	apos[1] = m_Control.sAct[1].fPos;
	apos[2] = m_Control.sAct[2].fPos;
	apos[3] = - m_Control.sAct[3].fPos;
	//Left leg pos
	apos[4] = - m_Control.sAct[4].fPos;
	apos[5] = - m_Control.sAct[5].fPos;
	apos[6] = m_Control.sAct[6].fPos;
	
	////temp

	//Right
	temp[2] = m_Control.sAct[1].sMuscleF.fTemperature;
	temp[3] = m_Control.sAct[1].sMuscleR.fTemperature;
	temp[4] = m_Control.sAct[2].sMuscleF.fTemperature;
	temp[5] = m_Control.sAct[2].sMuscleR.fTemperature;
	temp[6] = m_Control.sAct[3].sMuscleF.fTemperature;
	temp[7] = m_Control.sAct[3].sMuscleR.fTemperature;

	//Left
	temp[8] = m_Control.sAct[4].sMuscleF.fTemperature;
	temp[9] = m_Control.sAct[4].sMuscleR.fTemperature;
	temp[10] = m_Control.sAct[5].sMuscleF.fTemperature;
	temp[11] = m_Control.sAct[5].sMuscleR.fTemperature;
	temp[12] = m_Control.sAct[6].sMuscleF.fTemperature;
	temp[13] = m_Control.sAct[6].sMuscleR.fTemperature;
	
	//Trajectory
	t = t + 0.001;
	traj = 10 * sin_(t / 20 * 2 * pi);

	////force
	//Right
	cmd[2] = -180 * (traj - apos[1]);
	cmd[3] =  180 * (traj - apos[1]);
	
	cmd[4] = -180 * (traj - apos[2]);
	cmd[5] = 180 * (traj - apos[2]);
	
	cmd[6] = -180 * (traj - apos[3]);
	cmd[7] = 180 * (traj - apos[3]);
	
	//Left
	cmd[8] = -180 * (-traj - apos[4]);
	cmd[9] =  180 * (-traj - apos[4]);

	cmd[10] = -180 * (-traj - apos[5]);
	cmd[11] = 180 * (-traj - apos[5]);

	cmd[12] = -180 * (-traj - apos[6]);
	cmd[13] = 180 * (-traj - apos[6]);

	//Cmd(0 - 13) limit to 1000 (pwm 0~100%)
	for (int i = 0; i < 14; i++) {
		if (cmd[i] >= 1000) {
			force[i] = 1000;
		}
		else if (cmd[i] <= 0) {
			force[i] = 0;
		}
		else {
			force[i] = cmd[i];
		}
	}

	////Temp limit using FAN
	//Right
	//1-F
	if (force[2] == 0 || temp[2] >= 60) {
		m_Control.sRef[1].sMuscleF.nFan = 1;	}
	else {
		m_Control.sRef[1].sMuscleF.nFan = 0;	}
	//1-R
	if (force[3] == 0 || temp[3] >= 60) {
		m_Control.sRef[1].sMuscleR.nFan = 1;	}
	else {
		m_Control.sRef[1].sMuscleR.nFan = 0;	}

	//2-F
	if (force[4] == 0 || temp[4] >= 60) {
		m_Control.sRef[2].sMuscleF.nFan = 1;
	}
	else {
		m_Control.sRef[2].sMuscleF.nFan = 0;
	}
	//2-R
	if (force[5] == 0 || temp[5] >= 60) {
		m_Control.sRef[2].sMuscleR.nFan = 1;
	}
	else {
		m_Control.sRef[2].sMuscleR.nFan = 0;
	}

	//3-F
	if (force[6] == 0 || temp[6] >= 60) {
		m_Control.sRef[3].sMuscleF.nFan = 1;
	}
	else {
		m_Control.sRef[3].sMuscleF.nFan = 0;
	}
	//3-R
	if (force[7] == 0 || temp[7] >= 60) {
		m_Control.sRef[3].sMuscleR.nFan = 1;
	}
	else {
		m_Control.sRef[3].sMuscleR.nFan = 0;
	}

	//Left
	//4-F
	if (force[8] == 0 || temp[8] >= 60) {
		m_Control.sRef[4].sMuscleF.nFan = 1;	}
	else {
		m_Control.sRef[4].sMuscleF.nFan = 0;	}
	//4-R
	if (force[9] == 0 || temp[9] >= 60) {
		m_Control.sRef[4].sMuscleR.nFan = 1;	}
	else {
		m_Control.sRef[4].sMuscleR.nFan = 0;	}

	//5-F
	if (force[10] == 0 || temp[10] >= 60) {
		m_Control.sRef[5].sMuscleF.nFan = 1;
	}
	else {
		m_Control.sRef[5].sMuscleF.nFan = 0;
	}
	//5-R
	if (force[11] == 0 || temp[11] >= 60) {
		m_Control.sRef[5].sMuscleR.nFan = 1;
	}
	else {
		m_Control.sRef[5].sMuscleR.nFan = 0;
	}

	//6-F
	if (force[12] == 0 || temp[12] >= 60) {
		m_Control.sRef[6].sMuscleF.nFan = 1;
	}
	else {
		m_Control.sRef[6].sMuscleF.nFan = 0;
	}
	//6-R
	if (force[13] == 0 || temp[13] >= 60) {
		m_Control.sRef[6].sMuscleR.nFan = 1;
	}
	else {
		m_Control.sRef[6].sMuscleR.nFan = 0;
	}

	//Force to PWM ( using 4 ) 

	//Not using
	//m_Control.sRef[0].sMuscleF.nPWM = force[0];
	//m_Control.sRef[0].sMuscleR.nPWM = force[1];
	
	//--------------------------------------------------
	
	//1-Joint
	m_Control.sRef[1].sMuscleF.nPWM = force[2];
	m_Control.sRef[1].sMuscleR.nPWM = force[3];
	
	//2-Joint
	m_Control.sRef[2].sMuscleF.nPWM = force[4];
	m_Control.sRef[2].sMuscleR.nPWM = force[5];
	
	//3-Joint
	m_Control.sRef[3].sMuscleF.nPWM = force[6];
	m_Control.sRef[3].sMuscleR.nPWM = force[7];
	
	//--------------------------------------------------

	//4-Joint
	m_Control.sRef[4].sMuscleF.nPWM = force[8];
	m_Control.sRef[4].sMuscleR.nPWM = force[9];

	//5-Joint
	m_Control.sRef[5].sMuscleF.nPWM = force[10];
	m_Control.sRef[5].sMuscleR.nPWM = force[11];

	//6-Joint
	m_Control.sRef[6].sMuscleF.nPWM = force[12];
	m_Control.sRef[6].sMuscleR.nPWM = force[13];


}

/////////////////////////////////////////////////////yh

//#define DOF	7
//
//#define ACTJ_POS(n)					m_Control.sAct[n].fPos
//#define ACTJ_PWM(n)					m_Control.sAct[n].sMuscle.nPWM
#define ACTJ_F_TEMPERATURE(n)		m_Control.sAct[n].sMuscleF.fTemperature
#define ACTJ_R_TEMPERATURE(n)		m_Control.sAct[n].sMuscleR.fTemperature

//
#define TARGETJ_F_PWM(n)			m_Control.sTarget[n].sMuscleF.nPWM
#define TARGETJ_R_PWM(n)			m_Control.sTarget[n].sMuscleR.nPWM

//
//
//#define TESTMODE1	1
//#define TESTMODE2	2
//#define TESTMODE3	3



void CAMCONTROL::ReadData(void){

	short nEncTemp[7];

	memcpy(nEncTemp, m_Inputs.pEncRaw, sizeof(short) * 7);
	
	float fVoltTemperature[12] = { 0.0f, };

	//BLUE ADC
	float fInV = 5.0f;
	float fMaxCut	= 16777216.0f;

	//PLC
	//float fInV = 10.0f;
	//float fMaxCut = 32768.0f;

	for (int i = 0; i < 12; i++) {
		fVoltTemperature[i] = (m_Inputs.nTemperature_Raw[i] / fMaxCut) * fInV;
	}

	for (int i = 0; i < 6; i++) {
		ACTJ_F_TEMPERATURE(i + 1) = (fVoltTemperature[(i * 2)] - 1.25f) / 0.005f;
		ACTJ_R_TEMPERATURE(i + 1) = (fVoltTemperature[(i * 2) + 1] - 1.25f) / 0.005f;
	}

	for (int i = 0; i < 7; i++) {

		m_Control.sAct[i].sMuscleF.nPWM = m_Control.sRef[i].sMuscleF.nPWM;
		m_Control.sAct[i].sMuscleR.nPWM = m_Control.sRef[i].sMuscleR.nPWM;

		m_Control.sAct[i].sMuscleF.nFan = m_Control.sRef[i].sMuscleF.nFan;
		m_Control.sAct[i].sMuscleR.nFan = m_Control.sRef[i].sMuscleR.nFan;

		//m_Control.sAct[i].fPos = (float)nEncTemp[i] / 3200.0f * 360.0f;// (2.0f * _PI);
		m_Control.sAct[i].fPos = ((float)nEncTemp[i] - (float)m_SetupInfo.pEncHome[i]) / 3200.0f * 360.0f;// (2.0f * _PI);

		m_Control.sAct[i].sIMU.sRotation.fX = (float)m_Inputs.sIMU_Raw[i].sRotation.nX * 0.0078125f;
		m_Control.sAct[i].sIMU.sRotation.fY = (float)m_Inputs.sIMU_Raw[i].sRotation.nY * 0.0078125f;
		m_Control.sAct[i].sIMU.sRotation.fZ = (float)m_Inputs.sIMU_Raw[i].sRotation.nZ * 0.0078125f;

		m_Control.sAct[i].sIMU.sGyro.fX = (float)m_Inputs.sIMU_Raw[i].sGyro.nX * 0.015625f;
		m_Control.sAct[i].sIMU.sGyro.fY = (float)m_Inputs.sIMU_Raw[i].sGyro.nY * 0.015625f;
		m_Control.sAct[i].sIMU.sGyro.fZ = (float)m_Inputs.sIMU_Raw[i].sGyro.nZ * 0.015625f;

		m_Control.sAct[i].sIMU.sAcc.fX = (float)m_Inputs.sIMU_Raw[i].sAcc.nX * 0.0001220703125f;
		m_Control.sAct[i].sIMU.sAcc.fY = (float)m_Inputs.sIMU_Raw[i].sAcc.nY * 0.0001220703125f;
		m_Control.sAct[i].sIMU.sAcc.fZ = (float)m_Inputs.sIMU_Raw[i].sAcc.nZ * 0.0001220703125f;
	}
}


void CAMCONTROL::WriteData(void)
{
	int nFANRaw = 0;
	bool bEMG = false;
	
	for (int i = 0; i < 6; i++) {
		//if ((m_Control.sRef[i + 1].sMuscleF.fTemperature > 80.f) | (m_Control.sRef[i + 1].sMuscleR.fTemperature > 80.f)) {
		if((ACTJ_F_TEMPERATURE(i + 1) > 80.f ) | (ACTJ_R_TEMPERATURE(i + 1) > 80.f)){
			bEMG = true;
			break;
		}
	}
	
	if (bEMG == true) {
		for (int i = 0; i < 6; i++) {
			m_Control.sRef[i + 1].sMuscleF.nPWM = 0;
			m_Control.sRef[i + 1].sMuscleR.nPWM = 0;

			m_Control.sRef[i + 1].sMuscleF.nFan = 1;
			m_Control.sRef[i + 1].sMuscleR.nFan = 1;
		}
	}
	
	
	for (int i = 0; i < 6; i++) {
		m_Outputs.nPWM_Out[(i * 2) + 0] = (int)(255.0 * ((double)m_Control.sRef[i + 1].sMuscleF.nPWM / 1000.0));
		m_Outputs.nPWM_Out[(i * 2) + 1] = (int)(255.0 * ((double)m_Control.sRef[i + 1].sMuscleR.nPWM / 1000.0));

		//m_Control.sRef[i + 1].sMuscleF.nFan = 1;
		//m_Control.sRef[i + 1].sMuscleR.nFan = 1;

		nFANRaw = nFANRaw + (m_Control.sRef[i + 1].sMuscleF.nFan << (i * 2));
		nFANRaw = nFANRaw + (m_Control.sRef[i + 1].sMuscleR.nFan << (i * 2)+1);
	}

	m_Outputs.nFan_Out = nFANRaw;
}


///////////////////////////////////////////////////////////////////////////////
HRESULT CAMCONTROL::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CAMCONTROL::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

